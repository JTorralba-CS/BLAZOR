@page "/"

@using Microsoft.JSInterop
@inject IJSRuntime JS

@inject UniformResourceLocator _Server

@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable

@functions{
    ElementReference TextAreaX;
    int LineNumber = 0;

    void ScrollToEnd() {
        JS.InvokeVoidAsync("scrollToEnd", new object[] {TextAreaX});
    }
}

<div class="c-wrapper">
    <header class="c-header">
        <div class="input-group mb-3">
            <input type="text" class="form-control shadow-none" placeholder="" aria-label="URL" aria-describedby="Connect" @bind="_ChatHub.URL" disabled="@(IsConnected!=false)">
            <button class="btn btn-outline-secondary shadow-none" type="button" id="Connect" @onclick="Connect" disabled="@(IsConnected!=false)">@_Message.User</button>
        </div>
    </header>
    <div class="c-body" @ref=TextAreaX>
        @foreach (Message _Message in _Messages)
        {
            if (_Message.User == this._Message.User || Alias.Contains(_Message.User))
            {
                FontColor = "Green";
            }
            else
            {
                FontColor = "Blue";
            }
            <Message>
                @_Message.Time.ToString("yyyy-MM-dd_HH:mm:ss.fff")
                @_Message.User:
                <font color=@FontColor>@_Message.Content</font>
            </Message>
            <br />
        }
    </div>
    <footer class="c-footer">
        <div class="input-group mb-3">
            <input type="text" class="form-control shadow-none" placeholder="" aria-label="Message" aria-describedby="Send" @bind="_Message.Content" disabled="@(IsConnected==false)">
            <button class="btn btn-outline-secondary shadow-none" type="button" id="Send" @onclick="Send" disabled="@(IsConnected==false)">Send</button>
        </div>
    </footer>
</div>

@code {
    private UniformResourceLocator _ChatHub = new();

    private HubConnection? _HubConnection;
    private bool IsConnected => _HubConnection?.State == HubConnectionState.Connected;

    private Message _Message = new();
    private List<Message> _Messages = new();
    
    private List<String> Alias = new();

    private String FontColor;

    protected override void OnParametersSet()
    {
        _ChatHub.URL = _Server.Domain + "chathub";

        _Message.User = "Connect";
        Alias.Add(_Message.User);
    }

    private async Task Connect()
    {
        await InitializeSignalR(_ChatHub);
    }

    private async Task Send()
    {
        _Message.Time = DateTime.Now;

        if (_Message.Content != null)
        {
            if (_Message.Content.Trim() == "")
            {
                return;
            }
            else
            {
                String NameCheck = _Message.Content.Trim().ToLower();

                if (NameCheck.StartsWith("mi nombre es"))
                {
                    Char[] Space = " ".ToCharArray();
                    String[] NameCheckList = NameCheck.Split(Space);
                    if (NameCheckList.Length == 4)
                    {
                        if (_HubConnection is not null)
                        {
                            _Message.Content = "Call me " + NameCheckList[3].ToUpper() + ".";
                            await _HubConnection.SendAsync("TX", _Message);
                            _Message.Content = "";
                        }

                        _Message.User = NameCheckList[3].ToUpper().Trim();
                        Alias.Add(_Message.User);
                    }
                }
                else
                {
                    if (_HubConnection is not null)
                    {
                        await _HubConnection.SendAsync("TX", _Message);
                        _Message.Content = "";
                    }
                }
            }
        } 
    }

    private async Task InitializeSignalR(UniformResourceLocator _ChatHub)
    {
        _HubConnection = new HubConnectionBuilder()
            .WithUrl(_ChatHub.URL)
            .WithAutomaticReconnect()
            .Build();

        _HubConnection.Closed += RefreshDisconnected;
        _HubConnection.Reconnecting += RefreshDisconnected;
        _HubConnection.Reconnected += RefreshConnected;

        _HubConnection.On<Message>("RX", (_Message) =>
        {
            if (_Message.Content.ToUpper().Trim() == "`")
            {
                CustomClientEvent(_Message);
            }
            else if (_Message.Content.Contains(Convert.ToChar(30)))
            {
                ParseTable(_Message);
            }
            else
            {
                AppendMessage(_Message);
            }
        });
        await _HubConnection.StartAsync();

        if (IsConnected)
        {
            await RefreshConnected("");
        }
    }

    private async Task RefreshConnected(String S)
    {
        _Message.User = _HubConnection.ConnectionId.ToString().ToUpper().Substring(0, 5);
        Alias.Add(_Message.User);
        InvokeAsync(StateHasChanged);
    }

    private async Task RefreshDisconnected(Exception E)
    {
        _Message.User = "Connect";
        InvokeAsync(StateHasChanged);
    }

    public async ValueTask DisposeAsync()
    {
        if (_HubConnection is not null)
        {
            await _HubConnection.DisposeAsync();
        }
    }

    private void CustomClientEvent(Message _Message)
    {
        _Message.Content = "<Custom Client Event>";
        AppendMessage(_Message);
    }

    private void AppendMessage(Message _Message)
    {
        _Messages.Add(_Message);

        InvokeAsync(StateHasChanged);
        InvokeAsync(ScrollToEnd);
    }

    private void ParseTable(Message _Message)
    {
        String[] Rows = _Message.Content.Split(Convert.ToChar(30));
        foreach (String Row in Rows)
        {
            if (Row != "")
            {
                Message _Record = new();
                _Record.Time = _Message.Time;
                _Record.User = _Message.User;
                _Record.Content = "";

                String[] Columns = Row.Split(Convert.ToChar(31));
                foreach (String Column in Columns)
                {
                    if (Column != "")
                    {
                        _Record.Content = _Record.Content + " " + Column;
                    }
                }
                AppendMessage(_Record);
            }
        }
    }
}
