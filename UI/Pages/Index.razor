@page "/"

@using Microsoft.JSInterop
@inject IJSRuntime JS

@inject UniformResourceLocator URL

@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable

@functions{
    ElementReference TextAreaX;
    int LineNumber = 0;

    void ScrollToEnd() {
        JS.InvokeVoidAsync("scrollToEnd", new object[] {TextAreaX});
    }
}

<div class="c-wrapper">
    <header class="c-header">
        <div class="input-group mb-3">
            <input type="text" class="form-control shadow-none" placeholder="" aria-label="URL" aria-describedby="Connect" @bind="ChatHub" disabled="@(IsConnected!=false)">
            <button class="btn btn-outline-secondary shadow-none" type="button" id="Connect" @onclick="Connect" disabled="@(IsConnected!=false)">@User</button>
        </div>
    </header>
    <div class="c-body" @ref=TextAreaX>
        @foreach (DM Message in DMs)
        {
            <Message>@Message.User: <font color=@Message.Color>@Message.Message</font></Message>

            <br />
        }
    </div>
    <footer class="c-footer">
        <div class="input-group mb-3">
            <input type="text" class="form-control shadow-none" placeholder="" aria-label="Message" aria-describedby="Send" @bind="Message" disabled="@(IsConnected==false)">
            <button class="btn btn-outline-secondary shadow-none" type="button" id="Send" @onclick="Send" disabled="@(IsConnected==false)">Send</button>
        </div>
    </footer>
</div>

@code {
    private String? ChatHub;

    private String? User = "Connect";

    private String? Message;

    private List<DM> DMs = new();

    private HubConnection? _HubConnection;

    private bool IsConnected => _HubConnection?.State == HubConnectionState.Connected;

    protected override void OnParametersSet()
    {
        ChatHub = URL.Domain + "chathub";
    }

    private async Task Connect()
    {
        await InitializeSignalR(ChatHub);
    }

    private async Task Send()
    {
        String NameCheck = Message.Trim().ToLower();

        if (NameCheck.StartsWith("mi nombre es"))
        {
            String[] NameCheckList = NameCheck.Split("mi nombre es");
            if (NameCheckList.Length == 2)
            {
                if (_HubConnection is not null)
                {
                    await _HubConnection.SendAsync("TX", "SIGNALR", User + " --> " + NameCheckList[1].ToUpper());
                    Message = "";
                }

                User = NameCheckList[1].ToUpper();
            }
        }
        else
        {
            if (_HubConnection is not null)
            {
                await _HubConnection.SendAsync("TX", User, Message);
                Message = "";
            }
        }
    }

    private async Task InitializeSignalR(String ChatHub)
    {
        _HubConnection = new HubConnectionBuilder()
            .WithUrl(ChatHub)
            .WithAutomaticReconnect()
            .Build();

        _HubConnection.Closed += RefreshDisconnected;
        _HubConnection.Reconnecting += RefreshDisconnected;
        _HubConnection.Reconnected += RefreshConnected;

        _HubConnection.On<String, String>("RX", (User, Message) =>
        {
            if (Message.ToUpper().Trim() == "`")
            {
                CustomClientEvent(User);
            }
            else
            {
                AppendMessage(User, Message);
            }
        });
        await _HubConnection.StartAsync();

        if (IsConnected)
        {
            await RefreshConnected("");
        }
    }

    private async Task RefreshConnected(String S)
    {
        User = _HubConnection.ConnectionId.ToString().ToUpper().Substring(0, 5);
        InvokeAsync(StateHasChanged);
    }

    private async Task RefreshDisconnected(Exception E)
    {
        User = "Connect";
        InvokeAsync(StateHasChanged);
    }

    public async ValueTask DisposeAsync()
    {
        if (_HubConnection is not null)
        {
            await _HubConnection.DisposeAsync();
        }
    }

    private void CustomClientEvent(String User)
    {
        AppendMessage(User, "<Custom Client Event>");
    }

    private void AppendMessage(String User, String Message)
    {
        String Color;

        if (User == this.User)
        {
            Color = "Green";
        }
        else if (User == "SIGNALR")
        {
            Color = "Red";
        }
        else
        {
            Color = "Blue";
        }

        DM _DM = new();

        _DM.User = User;
        _DM.Message = Message;
        _DM.Color = Color;

        DMs.Add(_DM);

        InvokeAsync(StateHasChanged);
        InvokeAsync(ScrollToEnd);
    }

    public class DM
    {
        public string User { get; set; }
        public string Message { get; set; }
        public string Color { get; set; }
    }
}
