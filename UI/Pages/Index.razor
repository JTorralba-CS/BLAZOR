@page "/"

@using Microsoft.JSInterop
@inject IJSRuntime JS

@inject UniformResourceLocator URL

@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable

@functions{
    ElementReference TextAreaX;
    int LineNumber = 0;

    void ScrollToEnd() {
        JS.InvokeVoidAsync("scrollToEnd", new object[] {TextAreaX});
    }
}

<div class="input-group mb-3">
    <input type="text" class="form-control shadow-none" placeholder="" aria-label="URL" aria-describedby="Connect" @bind="ChatHub" disabled="@(IsConnected!=false)">
    <button class="btn btn-outline-secondary shadow-none" type="button" id="Connect" @onclick="Connect" disabled="@(IsConnected!=false)">@User</button>
</div>

<div class="mb-3">
    <textarea class="form-control shadow-none" id="Messages" rows="10" disabled @ref=TextAreaX>
    @foreach (String Message in Messages)
    {
        @Message
    }
    </textarea>
</div>

<div class="input-group mb-3">
    <input type="text" class="form-control shadow-none" placeholder="" aria-label="Message" aria-describedby="Send" @bind="Message" disabled="@(IsConnected==false)">
    <button class="btn btn-outline-secondary shadow-none" type="button" id="Send" @onclick="Send" disabled="@(IsConnected==false)">Send</button>
</div>

@code {
    private String? ChatHub;

    private String? User = "Connect";

    private String? Message;

    private List<String> Messages = new();

    private HubConnection? _HubConnection;

    private bool IsConnected => _HubConnection?.State == HubConnectionState.Connected;

    protected override void OnParametersSet()
    {
        ChatHub = URL.Domain + "chathub";
    }

    private async Task Connect()
    {
        await InitializeSignalR(ChatHub);
    }


    private async Task Send()
    {
        if (_HubConnection is not null)
        {
            await _HubConnection.SendAsync("TX", User, Message);
            Message = "";
        }
    }

    private async Task InitializeSignalR(String ChatHub)
    {
        _HubConnection = new HubConnectionBuilder()
            .WithUrl(ChatHub)
            .WithAutomaticReconnect()
            .Build();

        _HubConnection.Closed += RefreshDisconnected;
        _HubConnection.Reconnecting += RefreshDisconnected;
        _HubConnection.Reconnected += RefreshConnected;

        _HubConnection.On<String, String>("RX", (User, Message) =>
        {
            if (Message.ToUpper().Trim() == "`")
            {
                CustomClientEvent(User);
            }
            else
            {
                AppendMessage(User, Message);
            }
        });
        await _HubConnection.StartAsync();

        if (IsConnected)
        {
            await RefreshConnected("");
        }
    }

    private async Task RefreshConnected(String S)
    {
        User = _HubConnection.ConnectionId.ToString().ToUpper().Substring(0, 5);
        InvokeAsync(StateHasChanged);
    }

    private async Task RefreshDisconnected(Exception E)
    {
        User = "Connect";
        InvokeAsync(StateHasChanged);
    }

    public async ValueTask DisposeAsync()
    {
        if (_HubConnection is not null)
        {
            await _HubConnection.DisposeAsync();
        }
    }

    private void CustomClientEvent(String User)
    {
        AppendMessage(User, "<Custom Client Event>");
    }

    private void AppendMessage(String User, String Message)
    {
        Messages.Add($"{User}:  {Message}" + "\n");
        InvokeAsync(StateHasChanged);
        InvokeAsync(ScrollToEnd);
    }
}