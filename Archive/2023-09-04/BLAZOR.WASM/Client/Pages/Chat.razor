@page "/chat"

@using BLAZOR.WASM.Shared
@inject UniformResourceLocator URL

@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable

@inject WeatherForecastService WeatherForecast

<PageTitle>Chat</PageTitle>

<div class="form-group">
    <label>
        <input @bind="User" placeholder="User" size="15"/>
    </label>
</div>

<br/>

<div class="form-group">
    <label>
        <input @bind="Message" placeholder="Message" size="69" />
    </label>
</div>

<br />

<button @onclick="Send" disabled="@(IsConnected==false)">Send</button>

<hr/>

<ul>
    @foreach (String Message in Messages)
    {
        <li>@Message</li>
    }
</ul>

@code {
    private HubConnection? _HubConnection;

    private String? User;

    private String? Message;
    private List<String> Messages = new();

    private WeatherForecast[]? Forecasts;

    protected override async Task OnInitializedAsync()
    {
        _HubConnection = new HubConnectionBuilder()
            .WithUrl(URL.Domain + "chathub")
            .WithAutomaticReconnect()
            .Build();

        _HubConnection.On<String, String>("RX", (User, Message) =>
        {
            if (Message.ToUpper().Trim() == "`")
            {
                CallMessageX(User);
            }
            else
            {
                Messages.Add($"{User}: {Message}");
                InvokeAsync(StateHasChanged);
            }
        });

        await _HubConnection.StartAsync();
    }

    public bool IsConnected => _HubConnection?.State == HubConnectionState.Connected;

    private async Task Send()
    {
        if (_HubConnection is not null)
        {
            await _HubConnection.SendAsync("TX", User, Message);
        }
    }

        public async ValueTask DisposeAsync()
    {
        if (_HubConnection is not null)
        {
            await _HubConnection.DisposeAsync();
        }
    }

    private async void CallMessageX(String User)
    {
        String Message;
        Message = await TaskMessageX();
        
        Messages.Add($"{User}: {Message}");
        InvokeAsync(StateHasChanged);
    }

    protected async Task<String> TaskMessageX()
    {
        String Message = "";

        Forecasts = await WeatherForecast.GetForecastAsync(DateTime.Now);

        foreach (var Forcast in Forecasts)
        {
            Message = String.Concat(Message, " ", Forcast.Date.ToString().Trim());
        }

        return Message;
    }
};